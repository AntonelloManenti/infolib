{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 12,
     "status": "ok",
     "timestamp": 1641733732899,
     "user": {
      "displayName": "Antonello Manenti",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "17495113583668482416"
     },
     "user_tz": -60
    },
    "id": "NBegBUDX9HK_",
    "outputId": "0f6b5220-43bc-4091-966a-11560584b649"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python 3.10.1\n"
     ]
    }
   ],
   "source": [
    "!python --version"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 3702,
     "status": "ok",
     "timestamp": 1641723464984,
     "user": {
      "displayName": "Antonello Manenti",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "17495113583668482416"
     },
     "user_tz": -60
    },
    "id": "ZJi6-7tEuFIm",
    "outputId": "1dd8a571-61c8-4876-ae29-6393540e419e"
   },
   "outputs": [],
   "source": [
    "# !pip install seaborn\n",
    "# !pip install matplotlib\n",
    "# !pip install python-math\n",
    "# !pip install numpy\n",
    "# !pip install pandas\n",
    "# !pip install ipython\n",
    "# !pip install more-itertools\n",
    "# !pip install times\n",
    "# !pip install psutil"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "executionInfo": {
     "elapsed": 885,
     "status": "ok",
     "timestamp": 1641723292425,
     "user": {
      "displayName": "Antonello Manenti",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "17495113583668482416"
     },
     "user_tz": -60
    },
    "id": "0U1nbl62VMb4"
   },
   "outputs": [],
   "source": [
    "# import lib\n",
    "import seaborn as sns\n",
    "from matplotlib import pyplot as plt\n",
    "import math\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "pd.set_option('display.max_rows', 999)\n",
    "pd.set_option('display.max_colwidth', None)\n",
    "from IPython.display import display_html\n",
    "from itertools import chain, cycle\n",
    "sns.set('paper') #  paper, notebook, talk, poster\n",
    "import psutil\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pip list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 254,
     "status": "ok",
     "timestamp": 1641723328685,
     "user": {
      "displayName": "Antonello Manenti",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "17495113583668482416"
     },
     "user_tz": -60
    },
    "id": "1a1at2b5VV2J",
    "outputId": "e37ef008-471d-48f8-fc8d-57cad991ff84"
   },
   "outputs": [],
   "source": [
    "# paths\n",
    "staging = 'G:/My Drive/infolib/staging/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# test 1\n",
    "# import file to pandas\n",
    "df_01 = 'test.csv'\n",
    "df_02 = 'test_2.csv'\n",
    "df_03 = 'test_3.csv'\n",
    "df_04 = 'test_4.csv'\n",
    "df_05 = 'test_5.csv'\n",
    "df_06 = 'test_6.csv'\n",
    "df_07 = 'test_7.csv'\n",
    "df_08 = 'test_8.csv'\n",
    "df_09 = 'test_9.csv'\n",
    "\n",
    "# into pandas\n",
    "df_01 = pd.read_csv(f'{staging}{df_01}')\n",
    "df_02 = pd.read_csv(f'{staging}{df_02}')\n",
    "df_03 = pd.read_csv(f'{staging}{df_03}')\n",
    "df_04 = pd.read_csv(f'{staging}{df_04}')\n",
    "df_05 = pd.read_csv(f'{staging}{df_05}')\n",
    "df_06 = pd.read_csv(f'{staging}{df_06}', index_col=[0])\n",
    "df_07 = pd.read_csv(f'{staging}{df_07}', index_col=[0])\n",
    "df_08 = pd.read_csv(f'{staging}{df_08}', index_col=[0])\n",
    "df_09 = pd.read_csv(f'{staging}{df_09}')\n",
    "\n",
    "# csv\n",
    "df_01_csv = f'{staging}{df_01}'\n",
    "df_02_csv =f'{staging}{df_02}'\n",
    "df_03_csv = f'{staging}{df_03}'\n",
    "df_04_csv = f'{staging}{df_04}'\n",
    "df_05_csv = f'{staging}{df_05}'\n",
    "df_06_csv = f'{staging}{df_06}'\n",
    "df_07_csv = f'{staging}{df_07}'\n",
    "df_08_csv = f'{staging}{df_08}'\n",
    "df_09_csv = f'{staging}{df_09}'\n",
    "\n",
    "# list of dataframe\n",
    "df_list=[df_01, df_02, df_03, df_04, df_05, df_06, df_07, df_08, df_09]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "executionInfo": {
     "elapsed": 2387,
     "status": "ok",
     "timestamp": 1641723333188,
     "user": {
      "displayName": "Antonello Manenti",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "17495113583668482416"
     },
     "user_tz": -60
    },
    "id": "6ZVPEr8PV_W3"
   },
   "outputs": [],
   "source": [
    "# test 2\n",
    "# import file to pandas\n",
    "tdf_01 = 'Chess_games_stats.csv'\n",
    "tdf_02 = 'Conaf_Data_Chile_2017.csv'\n",
    "tdf_03 = 'Student_Marks.csv'\n",
    "tdf_04 = 'basic1.csv'\n",
    "tdf_05 = 'data.csv'\n",
    "tdf_06 = 'imdb_MOVIES.csv'\n",
    "tdf_07 = 'xAPI_Edu_Data.csv'\n",
    "tdf_08 = 'test.csv'\n",
    "tdf_09 = 'twitter.csv'\n",
    "tdf_10 = 'titanic_train.csv'\n",
    "tdf_11 = 'twitter_itaesp.csv'\n",
    "\n",
    "# into pandas\n",
    "tdf_01 = pd.read_csv(f'{staging}{tdf_01}', index_col=[0])\n",
    "tdf_02 = pd.read_csv(f'{staging}{tdf_02}', index_col=[0])\n",
    "tdf_03 = pd.read_csv(f'{staging}{tdf_03}', index_col=[0])\n",
    "tdf_04 = pd.read_csv(f'{staging}{tdf_04}', index_col=[0])\n",
    "tdf_05 = pd.read_csv(f'{staging}{tdf_05}', index_col=[0])\n",
    "tdf_06 = pd.read_csv(f'{staging}{tdf_06}', index_col=[0])\n",
    "tdf_07 = pd.read_csv(f'{staging}{tdf_07}', index_col=[0])\n",
    "tdf_08 = pd.read_csv(f'{staging}{tdf_08}', index_col=[0])\n",
    "# tdf_09 = pd.read_csv(f'{staging}{tdf_09}', index_col=[0])\n",
    "tdf_10 = pd.read_csv(f'{staging}{tdf_10}', index_col=[0])\n",
    "tdf_11 = pd.read_csv(f'{staging}{tdf_11}', index_col=[0])\n",
    "\n",
    "# csv\n",
    "tdf_01_csv = f'{staging}{tdf_01}'\n",
    "tdf_02_csv =f'{staging}{tdf_02}'\n",
    "tdf_03_csv = f'{staging}{tdf_03}'\n",
    "tdf_04_csv = f'{staging}{tdf_04}'\n",
    "tdf_05_csv = f'{staging}{tdf_05}'\n",
    "tdf_06_csv = f'{staging}{tdf_06}'\n",
    "tdf_07_csv = f'{staging}{tdf_07}'\n",
    "tdf_08_csv = f'{staging}{tdf_08}'\n",
    "# tdf_09_csv = f'{staging}{tdf_09}'\n",
    "tdf_10_csv = f'{staging}{tdf_10}'\n",
    "tdf_11_csv = f'{staging}{tdf_11}'\n",
    "\n",
    "# list of dataframe\n",
    "df_list=[tdf_01, tdf_02, tdf_03, tdf_04, tdf_05, tdf_06, tdf_07, tdf_08, tdf_10, tdf_11] # tdf_09"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "test = {'Text or mixed numeric/text': [1, 1, 1], 'Floating point numbers': [2000-1-1, 2000-9-1, 2000-1-1], \n",
    "     'Integer numbers': [np.nan, np.nan, np.nan], \n",
    "     'True/False values': [False, True, False], 'Date and time': [False, True, False],\n",
    "    'Differences between two datetimes': [1.1, 1.16, 1.1], 'Finite list of text values': [1.1, 1.16, 1.1], 'NaN values':[np.nan, np.nan, np.nan]}\n",
    "test=pd.DataFrame.from_dict(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_size(size_bytes):\n",
    "    if size_bytes == 0:\n",
    "        return \"0B\"\n",
    "    size_name = (\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\")\n",
    "    i = int(math.floor(math.log(size_bytes, 1024)))\n",
    "    p = math.pow(1024, i)\n",
    "    s = round(size_bytes / p, 2)\n",
    "    return \"%s %s\" % (s, size_name[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "executionInfo": {
     "elapsed": 1150,
     "status": "ok",
     "timestamp": 1641690717895,
     "user": {
      "displayName": "Antonello Manenti",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "17495113583668482416"
     },
     "user_tz": -60
    },
    "id": "99C4EtSWihmA"
   },
   "outputs": [],
   "source": [
    "# infolib\n",
    "def infolib(dataframe):\n",
    "\n",
    "    def convert_size(size_bytes):\n",
    "        if size_bytes == 0:\n",
    "            return \"0B\"\n",
    "        size_name = (\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\")\n",
    "        i = int(math.floor(math.log(size_bytes, 1024)))\n",
    "        p = math.pow(1024, i)\n",
    "        s = round(size_bytes / p, 2)\n",
    "        return \"%s %s\" % (s, size_name[i])\n",
    "\n",
    "    def get_df_name(dataframe):\n",
    "        name =[x for x in globals() if globals()[x] is dataframe][0]\n",
    "        return name\n",
    "\n",
    "    def display_side_by_side(*args, titles=cycle([''])):\n",
    "        html_str=''\n",
    "        for df,title in zip(args, chain(titles,cycle(['</br>'])) ):\n",
    "            html_str+='<th style=\"text-align:center\"><td style=\"vertical-align:top\">'\n",
    "            html_str+=f'<h5>{title}</h5>'\n",
    "            html_str+=df.to_html().replace('table','table style=\"display:inline\"')\n",
    "            html_str+='</td></th></br></br>'\n",
    "        display_html(html_str, raw=True)\n",
    "        return\n",
    "\n",
    "    if isinstance(dataframe, pd.DataFrame)==False:\n",
    "        print(f\"This function expects PandasDataframe argument.\\n{type(dataframe)} is not a valid argument.\\n\\nTry infolib(PandasDataframe) for info about {get_df_name(dataframe)} or visit\")\n",
    "    else:\n",
    "        if dataframe.empty==True:\n",
    "            display_side_by_side(dataframe, titles=[f\"Warning! Your PandasDataframe is empty\"])\n",
    "        else:\n",
    "            try:\n",
    "                Df_desc = {'dataset': [], 'columns': [], 'rows': [], 'rows_whitout_NaN': [], 'rows_whit_NaN':[], 'rows_duplicate':[],\n",
    "                           'rows_unique':[], 'memory_usage':[]}\n",
    "\n",
    "                namedf = get_df_name(dataframe)\n",
    "                Df_desc['dataset'].append(namedf)\n",
    "\n",
    "                dataframes = dataframe.reset_index()\n",
    "\n",
    "                if 'index' in dataframe.columns:\n",
    "                    dataframe = dataframe.drop('index', axis=1)\n",
    "\n",
    "                i = len(dataframes.columns)\n",
    "                Df_desc['columns'].append(i)\n",
    "\n",
    "                i = len(dataframes.index)\n",
    "                Df_desc['rows'].append(i)\n",
    "\n",
    "                i = len(dataframes.index)-len(dataframe.drop_duplicates())\n",
    "                Df_desc['rows_duplicate'].append(i)\n",
    "\n",
    "                i = len(dataframes.index)-(len(dataframe.index)-len(dataframe.drop_duplicates()))\n",
    "                Df_desc['rows_unique'].append(i)\n",
    "\n",
    "                i = len(dataframes.index)-(len(dataframe[dataframe.isna().any(axis=1)].index))\n",
    "                Df_desc['rows_whitout_NaN'].append(i)\n",
    "\n",
    "                i = len(dataframes[dataframes.isna().any(axis=1)].index)\n",
    "                Df_desc['rows_whit_NaN'].append(i)\n",
    "\n",
    "                i = dataframes.memory_usage(deep=True, index=True).sum()\n",
    "                i = convert_size(i)\n",
    "                Df_desc['memory_usage'].append(i)\n",
    "\n",
    "                DataFrames = pd.DataFrame.from_dict(Df_desc, orient='columns')\n",
    "                DataFrames = DataFrames.set_index('dataset')\n",
    "                DataFrames.index.name = None\n",
    "\n",
    "                Tot_desc_num = {'feature_name': [], 'dtypes': [], 'not_NaN': [], 'NaN': [], 'unique':[],\n",
    "                          'mean':[], 'std':[], 'min':[], 'max':[], '25%':[], '50%':[], '75%':[]}\n",
    "                Tot_desc_cat = {'feature_name': [], 'dtypes': [], 'not_NaN': [], 'NaN': [], 'unique':[],\n",
    "                          'top':[], 'freq':[], 'min_len':[], 'max_len':[]}\n",
    "\n",
    "\n",
    "                for i in dataframe.columns:\n",
    "\n",
    "                    if np.issubdtype(dataframes[i].dtype, np.number)==True:\n",
    "                        Tot_desc_num['feature_name'].append(i)\n",
    "\n",
    "                        a = dataframes[i].dtypes\n",
    "                        Tot_desc_num['dtypes'].append(a)\n",
    "\n",
    "                        a = dataframes[i].count()\n",
    "                        Tot_desc_num['not_NaN'].append(a)\n",
    "\n",
    "                        a = dataframes[i].isna().sum()\n",
    "                        Tot_desc_num['NaN'].append(a)\n",
    "\n",
    "                        a = dataframes[i].nunique()\n",
    "                        Tot_desc_num['unique'].append(a)\n",
    "\n",
    "                        a = round(dataframes[i].mean(),3)\n",
    "                        Tot_desc_num['mean'].append(a)\n",
    "\n",
    "                        a = round(dataframes[i].std(),3)\n",
    "                        Tot_desc_num['std'].append(a)\n",
    "\n",
    "                        a = round(dataframes[i].min(),3)\n",
    "                        Tot_desc_num['min'].append(a)\n",
    "\n",
    "                        a = round(dataframes[i].max(),3)\n",
    "                        Tot_desc_num['max'].append(a)\n",
    "\n",
    "                        a = round(dataframes[i].quantile(0.25),3)\n",
    "                        Tot_desc_num['25%'].append(a)\n",
    "\n",
    "                        a = round(dataframes[i].quantile(0.5),3)\n",
    "                        Tot_desc_num['50%'].append(a)\n",
    "\n",
    "                        n = round(dataframes[i].quantile(0.75),3)\n",
    "                        Tot_desc_num['75%'].append(a)\n",
    "\n",
    "                    else:\n",
    "                        Tot_desc_cat['feature_name'].append(i)\n",
    "\n",
    "                        a = dataframes[i].dtypes\n",
    "                        Tot_desc_cat['dtypes'].append(a)\n",
    "\n",
    "                        a = dataframes[i].count()\n",
    "                        Tot_desc_cat['not_NaN'].append(a)\n",
    "\n",
    "                        a = dataframes[i].isna().sum()\n",
    "                        Tot_desc_cat['NaN'].append(a)\n",
    "\n",
    "                        a = dataframes[i].nunique()\n",
    "                        Tot_desc_cat['unique'].append(a)\n",
    "\n",
    "                        a = dataframes[i].value_counts().idxmax()\n",
    "                        Tot_desc_cat['top'].append(a)\n",
    "\n",
    "                        a = dataframes[i].value_counts()\n",
    "                        a = a.iloc[0]\n",
    "                        Tot_desc_cat['freq'].append(a)\n",
    "\n",
    "                        a = []\n",
    "                        for ii in dataframes[i].astype(str):\n",
    "                            b = len(ii)\n",
    "                            a.append(b)\n",
    "                        ma = max(a)\n",
    "                        mi = min(a)\n",
    "                        Tot_desc_cat['max_len'].append(ma)\n",
    "                        Tot_desc_cat['min_len'].append(mi)\n",
    "\n",
    "                Numerical_Features = pd.DataFrame.from_dict(Tot_desc_num, orient='columns')\n",
    "                Numerical_Features = Numerical_Features.set_index('feature_name')\n",
    "                Numerical_Features.index.name = None\n",
    "\n",
    "                Categorical_Features = pd.DataFrame.from_dict(Tot_desc_cat, orient='columns')\n",
    "                Categorical_Features = Categorical_Features.set_index('feature_name')\n",
    "                Categorical_Features.index.name = None\n",
    "\n",
    "                Sample = dataframe.sample(3)\n",
    "\n",
    "                if not DataFrames.empty:\n",
    "                    if not Numerical_Features.empty:\n",
    "                        if not Categorical_Features.empty:\n",
    "                            print()\n",
    "                            display_side_by_side(DataFrames, Numerical_Features, Categorical_Features, Sample, titles=[f'Overview of {namedf}','Numeric Features', 'Other Features', f'Sample of {namedf}'])\n",
    "\n",
    "                if not DataFrames.empty:\n",
    "                    if not Numerical_Features.empty:\n",
    "                        if Categorical_Features.empty:\n",
    "                            print()\n",
    "                            display_side_by_side(DataFrames, Numerical_Features, Sample, titles=[f'Overview of {namedf}','Numeric Features', f'Sample of {namedf}'])\n",
    "\n",
    "                if not DataFrames.empty:\n",
    "                    if Numerical_Features.empty:\n",
    "                        if not Categorical_Features.empty:\n",
    "                            print()\n",
    "                            display_side_by_side(DataFrames, Categorical_Features, Sample, titles=[f'Overview of {namedf}', 'Features', f'Sample of {namedf}'])\n",
    "\n",
    "            except Exception as e:\n",
    "                print(repr(e))\n",
    "\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "\n",
    "test_01=[\"a\", \"d\", \"f\", \"r\", \"t\", \"ssss\"]\n",
    "\n",
    "infolib(test_01)\n",
    "\n",
    "print()\n",
    "print()\n",
    "print(f'CPU usage: {psutil.cpu_percent()}%')\n",
    "print(f'RAM usage: {psutil.virtual_memory().percent}%')\n",
    "print(f'RAM free: {convert_size(psutil.virtual_memory().free)}')\n",
    "print(f'RAM total: {convert_size(psutil.virtual_memory().total)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<th style=\"text-align:center\"><td style=\"vertical-align:top\"><h5>Warning! Your PandasDataframe is empty</h5><table style=\"display:inline\" border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text or mixed numeric/text</th>\n",
       "      <th>Integer numbers</th>\n",
       "      <th>Floating point numbers</th>\n",
       "      <th>True/False values</th>\n",
       "      <th>Date and time</th>\n",
       "      <th>Differences between two datetimes</th>\n",
       "      <th>Finite list of text values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table style=\"display:inline\"></td></th></br></br>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "infolib(df_02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 554
    },
    "executionInfo": {
     "elapsed": 16,
     "status": "ok",
     "timestamp": 1641690698941,
     "user": {
      "displayName": "Antonello Manenti",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "17495113583668482416"
     },
     "user_tz": -60
    },
    "id": "ty_B4d3bnGA-",
    "outputId": "ae3efc62-c3c4-467c-dc2a-65b45e425dd3"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<th style=\"text-align:center\"><td style=\"vertical-align:top\"><h5>Warning! Your PandasDataframe is empty</h5><table style=\"display:inline\" border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text or mixed numeric/text</th>\n",
       "      <th>Integer numbers</th>\n",
       "      <th>Floating point numbers</th>\n",
       "      <th>True/False values</th>\n",
       "      <th>Date and time</th>\n",
       "      <th>Differences between two datetimes</th>\n",
       "      <th>Finite list of text values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table style=\"display:inline\"></td></th></br></br>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test=df_01.dropna(axis=0)\n",
    "infolib(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = {'Text or mixed numeric/text': [1, 1, 1], 'Floating point numbers': [2000-1-1, 2000-9-1, 2000-1-1], \n",
    "     'Integer numbers': [np.nan, np.nan, np.nan], \n",
    "     'True/False values': [False, True, False], 'Date and time': [False, True, False],\n",
    "    'Differences between two datetimes': [1.1, 1.16, 1.1], 'Finite list of text values': [1.1, 1.16, 1.1], 'NaN values':[np.nan, np.nan, np.nan]}\n",
    "test=pd.DataFrame.from_dict(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<th style=\"text-align:center\"><td style=\"vertical-align:top\"><h5>Overview of test</h5><table style=\"display:inline\" border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>columns</th>\n",
       "      <th>rows</th>\n",
       "      <th>rows_whitout_NaN</th>\n",
       "      <th>rows_whit_NaN</th>\n",
       "      <th>rows_duplicate</th>\n",
       "      <th>rows_unique</th>\n",
       "      <th>memory_usage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test</th>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>302.0 B</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table style=\"display:inline\"></td></th></br></br><th style=\"text-align:center\"><td style=\"vertical-align:top\"><h5>Numeric Features</h5><table style=\"display:inline\" border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dtypes</th>\n",
       "      <th>not_NaN</th>\n",
       "      <th>NaN</th>\n",
       "      <th>unique</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Text or mixed numeric/text</th>\n",
       "      <td>int64</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Floating point numbers</th>\n",
       "      <td>int64</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1995.333</td>\n",
       "      <td>4.619</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>1998.00</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>1998.0</td>\n",
       "      <td>1998.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Integer numbers</th>\n",
       "      <td>float64</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Differences between two datetimes</th>\n",
       "      <td>float64</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.120</td>\n",
       "      <td>0.035</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.16</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Finite list of text values</th>\n",
       "      <td>float64</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.120</td>\n",
       "      <td>0.035</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.16</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NaN values</th>\n",
       "      <td>float64</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table style=\"display:inline\"></td></th></br></br><th style=\"text-align:center\"><td style=\"vertical-align:top\"><h5>Other Features</h5><table style=\"display:inline\" border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dtypes</th>\n",
       "      <th>not_NaN</th>\n",
       "      <th>NaN</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "      <th>min_len</th>\n",
       "      <th>max_len</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>True/False values</th>\n",
       "      <td>bool</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date and time</th>\n",
       "      <td>bool</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table style=\"display:inline\"></td></th></br></br><th style=\"text-align:center\"><td style=\"vertical-align:top\"><h5>Sample of test</h5><table style=\"display:inline\" border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text or mixed numeric/text</th>\n",
       "      <th>Floating point numbers</th>\n",
       "      <th>Integer numbers</th>\n",
       "      <th>True/False values</th>\n",
       "      <th>Date and time</th>\n",
       "      <th>Differences between two datetimes</th>\n",
       "      <th>Finite list of text values</th>\n",
       "      <th>NaN values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1.10</td>\n",
       "      <td>1.10</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1.10</td>\n",
       "      <td>1.10</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1990</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>1.16</td>\n",
       "      <td>1.16</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table style=\"display:inline\"></td></th></br></br>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "infolib(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "# controllare multindex importare titanic!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Integer numbers</th>\n",
       "      <th>Differences between two datetimes</th>\n",
       "      <th>NaN values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.909465e+12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9.576194e+12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5.250000e+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.000000e+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.750000e+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.345679e+13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Integer numbers  Differences between two datetimes  NaN values\n",
       "count     6.000000e+00                                0.0         0.0\n",
       "mean      3.909465e+12                                NaN         NaN\n",
       "std       9.576194e+12                                NaN         NaN\n",
       "min       3.000000e+00                                NaN         NaN\n",
       "25%       5.250000e+00                                NaN         NaN\n",
       "50%       7.000000e+00                                NaN         NaN\n",
       "75%       8.750000e+00                                NaN         NaN\n",
       "max       2.345679e+13                                NaN         NaN"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_05.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "authorship_tag": "ABX9TyN+teP1zC6w2dzJgqP1H6Fo",
   "collapsed_sections": [],
   "name": "infolib.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
