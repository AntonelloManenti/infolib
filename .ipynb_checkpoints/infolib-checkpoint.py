# -*- coding: utf-8 -*-
"""infolib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ogBfh5U9anM8P0kmyqiqXxrwzxNYui4K
"""

#import drive dir
from google.colab import drive
drive.mount('/content/drive')

!pip install seaborn

# import lib
import seaborn as sns
from matplotlib import pyplot as plt
import math
import os
import glob
import warnings
warnings.filterwarnings('ignore')
from tqdm.notebook import tqdm
import numpy as np
import pandas as pd
pd.set_option('display.max_rows', 999)
pd.set_option('display.max_colwidth', None)
from IPython.display import display_html
from itertools import chain,cycle
sns.set('paper') #  paper, notebook, talk, poster

# paths
drive_dir = '/content/drive/MyDrive/'
root = f'infolib/'
try:
  os.mkdir(f'{drive_dir}{root}')
  print(f'New path {root} created\n')
except Exception as e:
  print(e)
staging_path = f'staging/'
try:
  os.mkdir(f'{drive_dir}{root}{staging_path}')
  print(f'New path {staging_path} created\n')
except Exception as e:
  print(e)
staging = f'{drive_dir}{root}{staging_path}'

# import file to pandas
df_01 = 'Chess_games_stats.csv'
df_02 = 'Conaf_Data_Chile_2017.csv'
df_03 = 'Student_Marks.csv'
df_04 = 'basic1.csv'
df_05 = 'data.csv'
df_06 = 'imdb_MOVIES.csv'
df_07 = 'xAPI_Edu_Data.csv'

# aggiungere titanic, petal, serie false e true, serie temporali

df_01 = pd.read_csv(f'{staging}{df_01}', index_col=[0])
df_02 = pd.read_csv(f'{staging}{df_02}', index_col=[0])
df_03 = pd.read_csv(f'{staging}{df_03}', index_col=[0])
df_04 = pd.read_csv(f'{staging}{df_04}', index_col=[0])
df_05 = pd.read_csv(f'{staging}{df_05}', index_col=[0])
df_06 = pd.read_csv(f'{staging}{df_06}', index_col=[0])
df_07 = pd.read_csv(f'{staging}{df_07}', index_col=[0])

df_list=[df_01, df_02, df_03, df_04, df_05, df_06, df_07]

# infolib
def infolib(dataframe, series=None):

  def convert_size(size_bytes):
    if size_bytes == 0:
      return "0B"
    size_name = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return "%s %s" % (s, size_name[i])

  def get_df_name(dataframe):
    name =[x for x in globals() if globals()[x] is dataframe][0]
    return name
  
  def display_side_by_side(*args,titles=cycle([''])):
    html_str=''
    for df,title in zip(args, chain(titles,cycle(['</br>'])) ):
        html_str+='<th style="text-align:center"><td style="vertical-align:top">'
        html_str+=f'<h4>{title}</h4>'
        html_str+=df.to_html().replace('table','table style="display:inline"')
        html_str+='</td></th></br></br>'
    display_html(html_str,raw=True)
    return

  if isinstance(dataframe, pd.DataFrame)==False:
    print(f"This function expects PandasDataframe argument. {get_df_name(dataframe)} is not a valid argument.\nTry infolib(PandasDataframe) for info about {get_df_name(dataframe)} or infolib(PandasDataframe, 'column_name') for info about fature 'column_name in {get_df_name(dataframe)}'")
  else:
    if isinstance(dataframe, pd.DataFrame)==True and series is None:
      print(f'infolib(PandasDataFrame) for info about your DataFrame {get_df_name(dataframe)}')

      try:

          Df_desc = {'dataset': [], 'columns': [], 'rows': [], 'row_duplicate':[], 'row_unique':[], 'row_whitout_NaN': [], 'row_whit_NaN':[], 'memory_usage':[]}

          namedf=get_df_name(dataframe)
          Df_desc['dataset'].append(namedf)

          a=len(dataframe.columns)
          Df_desc['columns'].append(a)
          
          b=len(dataframe.index)
          Df_desc['rows'].append(b)
          
          c=len(dataframe.index)-len(dataframe.drop_duplicates())
          Df_desc['row_duplicate'].append(c)
          
          c=len(dataframe.index)-(len(dataframe.index)-len(dataframe.drop_duplicates()))
          Df_desc['row_unique'].append(c)
          
          d = len(dataframe.index)-dataframe.isna().sum().sum()
          Df_desc['row_whitout_NaN'].append(d)
          
          e = dataframe.isna().sum().sum()
          Df_desc['row_whit_NaN'].append(e)

          ea = dataframe.memory_usage(deep=True).sum()
          ea=convert_size(ea)
          Df_desc['memory_usage'].append(ea)

          DataFrames=pd.DataFrame.from_dict(Df_desc, orient='columns')
          DataFrames=DataFrames.set_index('dataset')
          DataFrames.index.name = None

          Tot_desc_num = {'feature_name': [], 'dtypes': [], 'count_not_NaN': [], 'count_NaN': [], 'unique':[],
                      'mean':[], 'std':[], 'min':[], 'max':[], '25%':[], '50%':[], '75%':[]}
          Tot_desc_cat = {'feature_name': [], 'dtypes': [], 'count_not_NaN': [], 'count_NaN': [], 'unique':[],
                      'top':[], 'freq':[]}
            
          for i in dataframe.columns:
            a=dataframe[i].dtypes
            
            if (a == int) or (a == float):
              Tot_desc_num['feature_name'].append(i)
              
              a=dataframe[i].dtypes
              Tot_desc_num['dtypes'].append(a)
              
              b=dataframe[i].count()
              Tot_desc_num['count_not_NaN'].append(b)
              
              c=dataframe[i].isna().sum()
              Tot_desc_num['count_NaN'].append(c)
              
              d = dataframe[i].nunique()
              Tot_desc_num['unique'].append(d)
              
              e=round(dataframe[i].mean(),3)
              Tot_desc_num['mean'].append(e)
              
              f=round(dataframe[i].std(),3)
              Tot_desc_num['std'].append(f)
              
              g=round(dataframe[i].min(),3)
              Tot_desc_num['min'].append(g)
              
              h=round(dataframe[i].max(),3)
              Tot_desc_num['max'].append(h)
              
              l=round(dataframe[i].quantile(0.25),3)
              Tot_desc_num['25%'].append(l)
              
              m=round(dataframe[i].quantile(0.5),3)
              Tot_desc_num['50%'].append(m)
              
              n=round(dataframe[i].quantile(0.75),3)
              Tot_desc_num['75%'].append(n)

            else:
              Tot_desc_cat['feature_name'].append(i)
              
              a=dataframe[i].dtypes
              Tot_desc_cat['dtypes'].append(a)
              
              b=dataframe[i].count()
              Tot_desc_cat['count_not_NaN'].append(b)
              
              c=dataframe[i].isna().sum()
              Tot_desc_cat['count_NaN'].append(c)
              
              d = dataframe[i].nunique()
              Tot_desc_cat['unique'].append(d)
              
              o=dataframe[i].value_counts().idxmax()
              Tot_desc_cat['top'].append(o)
              
              p=dataframe[i].value_counts()
              q=p.iloc[0]
              Tot_desc_cat['freq'].append(q)

          Numerical_Features=pd.DataFrame.from_dict(Tot_desc_num, orient='columns')
          Numerical_Features=Numerical_Features.set_index('feature_name')
          Numerical_Features.index.name = None

          Categorical_Features=pd.DataFrame.from_dict(Tot_desc_cat, orient='columns')
          Categorical_Features=Categorical_Features.set_index('feature_name')     
          Categorical_Features.index.name = None
          
          if not DataFrames.empty:
            if not Numerical_Features.empty:
              if not Categorical_Features.empty:
                display_side_by_side(DataFrames, Numerical_Features, Categorical_Features, titles=['DataFrame','Numeric Features', 'Categorical Features'])

          if not DataFrames.empty:
            if not Numerical_Features.empty:
              if Categorical_Features.empty:
                display_side_by_side(DataFrames, Numerical_Features, titles=['DataFrame','Numeric Features'])

          if not DataFrames.empty:
            if Numerical_Features.empty:
              if not Categorical_Features.empty:
                display_side_by_side(DataFrames, Categorical_Features, titles=['DataFrame', 'Categorical Features'])

      except:
      
        print(f'Error in your PandasDataframe')
        print(e)
    
    else:
      if isinstance(dataframe, pd.DataFrame)==True and isinstance(series, str)==True:
        var_desc_num = {'feature_name': [], 'dtypes': [], 'count': [], 'unique': [], 'NaN':[],
                      'mean':[], 'mode':[],'median':[], 'std':[], 'min':[], 'max':[], 'sample':[]}
        var_desc_cat = {'feature_name': [], 'dtypes': [], 'count_not_NaN': [], 'count_NaN': [], 'unique':[],
                      'top':[], 'freq':[],'sample':[]}
        a=dataframe[series].dtypes    
        if (a == int) or (a == float): # num
          try:
            print(f'Qui numeriche')
            var_desc_num['feature_name'].append(series)

            var_desc_num['dtypes'].append(a)
            
            b=dataframe[series].count()
            var_desc_num['count'].append(b)
            
            c=dataframe[series].isna().sum()
            var_desc_num['NaN'].append(c)
            
            d = dataframe[series].nunique()
            var_desc_num['unique'].append(d)
            
            e=round(dataframe[series].mean(),3)
            var_desc_num['mean'].append(e)

            e=dataframe[series].mode()[0]
            var_desc_num['mode'].append(e)

            e=dataframe[series].median()
            var_desc_num['median'].append(e)
            
            f=round(dataframe[series].std(),3)
            var_desc_num['std'].append(f)
            
            g=round(dataframe[series].min(),3)
            var_desc_num['min'].append(g)
            
            h=round(dataframe[series].max(),3)
            var_desc_num['max'].append(h)
            
            l=dataframe[series].sample(1)[0]
            var_desc_num['sample'].append(l)
            





            var_desc_num=pd.DataFrame.from_dict(var_desc_num, orient='columns')
            var_desc_num=var_desc_num.set_index('feature_name')     
            var_desc_num.index.name = None
            display_side_by_side(var_desc_num, titles=[f'Feature Num.'])

            f, (ax_box, ax_hist) = plt.subplots(2, sharex=True, figsize=(9,6), gridspec_kw= {"height_ratios": (0.2, 1)})
            plt.subplots_adjust(hspace=0.05)
            mean=dataframe[series].mean()
            median=dataframe[series].median()
            mode=dataframe[series].mode().values[0]

            sns.boxplot(data=dataframe, x=series, ax=ax_box)
            ax_box.axvline(mean, color='r', linestyle='--')
            ax_box.axvline(median, color='g', linestyle='-')
            ax_box.axvline(mode, color='b', linestyle='-')

            sns.histplot(data=dataframe, x=series, ax=ax_hist, kde=True)
            ax_hist.axvline(mean, color='r', linestyle='--', label="Mean")
            ax_hist.axvline(median, color='g', linestyle='-', label="Median")
            ax_hist.axvline(mode, color='b', linestyle='-', label="Mode")

            ax_hist.legend()

            ax_box.set(xlabel='')
            plt.show()


            

          except:
            print(f'Series is not in columns è dataframe giusto e series stringa ma non è una colonna del df')
            print(e)
        
        else: # cat
          
          try:
            print('qui categoriche')

            var_desc_cat['feature_name'].append(series)

            var_desc_cat['dtypes'].append(a)
            
            b=dataframe[series].count()
            var_desc_cat['count_not_NaN'].append(b)
            
            c=dataframe[series].isna().sum()
            var_desc_cat['count_NaN'].append(c)
            
            d = dataframe[series].nunique()
            var_desc_cat['unique'].append(d)
            
            e=dataframe[series].value_counts().idxmax()
            var_desc_cat['top'].append(e)

            p=dataframe[series].value_counts()
            e=p.iloc[0]
            var_desc_cat['freq'].append(e)

            e=dataframe[series].sample(1)[0]
            var_desc_cat['sample'].append(e)
            


            var_desc_cat=pd.DataFrame.from_dict(var_desc_cat, orient='columns')
            var_desc_cat=var_desc_cat.set_index('feature_name')     
            var_desc_cat.index.name = None
            display_side_by_side(var_desc_cat, titles=[f'Feature cat.'])


            # # titolo
            # # colonne: nome variabile, dtype, Unicode, count, unique, NaN, min, max, std, Mean, mode, mediana, sum, sample
            # # forse anche max len e min len!



            f, (ax_box, ax_hist) = plt.subplots(2, sharex=True, figsize=(9,6), gridspec_kw= {"height_ratios": (0.2, 1)})
            plt.subplots_adjust(hspace=0.05)


            sns.boxplot(data=dataframe, x=series, ax=ax_box)


            sns.histplot(data=dataframe, x=series, ax=ax_hist, kde=True)


            ax_hist.legend()

            ax_box.set(xlabel='')
            plt.show()
          except:
            print(f'Series is not in columns è dataframe giusto e series stringa ma non è una colonna del df')
            print(e)
     
     
     
     
      else:
          print(f'Errore dataframe true ma str non è una stringa')

infolib(df_04)

infolib(df_04, "f4")

df_04["age"].mode()[0]

a=df_02[['long', 'lat', 'temporada']]
b=df_02['long']
c=df_02['lat']
d=1
e='lat'
f='rut'





# data = pd.DataFrame(data_set['mpg'])
sns.distplot(a[e], kde=True)